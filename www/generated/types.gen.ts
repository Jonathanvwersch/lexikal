// This file is auto-generated by @hey-api/openapi-ts

/**
 * A single message in a chat conversation.
 */
export type ChatMessage = {
    role: string;
    content: string;
};

/**
 * Metadata for a chat message.
 */
export type ChatMessageMetadata = {
    page: number;
};

/**
 * A source for a chat message.
 */
export type ChatMessageSource = {
    context_id: string;
    content: string;
    similarity: number;
    metadata: ChatMessageMetadata;
    citation_id: string;
};

/**
 * Schema for incoming chat API requests.
 */
export type ChatRequest = {
    message: string;
    context_ids?: (Array<(string)> | null);
    history?: (Array<ChatMessage> | null);
};

/**
 * Schema for outgoing chat API responses.
 */
export type ChatResponse = {
    message: string;
    sources: Array<ChatMessageSource>;
};

/**
 * Response model for getting a context file.
 */
export type ContextFileGetResponse = {
    /**
     * Signed URL for accessing the context file
     */
    url: string;
    /**
     * The media type of the file
     */
    mediaType: string;
};

/**
 * Response model for getting a single context.
 */
export type ContextGetResponse = {
    /**
     * The name of the context
     */
    name: string;
    /**
     * The description of the context
     */
    description?: (string | null);
    /**
     * The type of the context, e.g., PDF, text
     */
    type: ContextType;
    /**
     * The name of the context file
     */
    originalFileName: string;
    /**
     * The unique identifier of the context
     */
    id: string;
    /**
     * The URL of where the context is stored
     */
    url: string;
};

/**
 * Request model for posting context metadata.
 */
export type ContextMetadataPostRequest = {
    /**
     * The name of the context
     */
    name: string;
    /**
     * The description of the context
     */
    description?: (string | null);
    /**
     * The type of the context, e.g., PDF, text
     */
    type: ContextType;
    /**
     * The name of the context file
     */
    originalFileName: string;
};

/**
 * Response model for posting context metadata.
 */
export type ContextMetadataPostResponse = {
    /**
     * The name of the context
     */
    name: string;
    /**
     * The description of the context
     */
    description?: (string | null);
    /**
     * The type of the context, e.g., PDF, text
     */
    type: ContextType;
    /**
     * The name of the context file
     */
    originalFileName: string;
    /**
     * The unique identifier of the context
     */
    id: string;
    /**
     * Signed URL for uploading context file
     */
    signedUploadUrl: string;
};

/**
 * Response model for getting multiple contexts.
 */
export type ContextsGetResponse = {
    /**
     * The list of contexts
     */
    contexts: Array<ContextGetResponse>;
};

/**
 * Enumeration of supported context types for document processing.
 */
export type ContextType = 'pdf' | 'external_url' | 'free_form_text';

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Response model for getting a single notebook.
 *
 * Attributes:
 * owner_id: Unique identifier of the notebook owner
 */
export type NotebookGetResponse = {
    /**
     * The name of the notebook
     */
    name: string;
    /**
     * The description of the notebook
     */
    description?: (string | null);
    /**
     * The unique identifier of the notebook
     */
    id: string;
    /**
     * The date and time the notebook was created
     */
    createdAt: Date;
    /**
     * The date and time the notebook was last updated
     */
    updatedAt: Date;
    /**
     * The unique identifier of the user who owns the notebook
     */
    ownerId: string;
};

/**
 * Request model for creating a new notebook.
 */
export type NotebookPostRequest = {
    /**
     * The name of the notebook
     */
    name: string;
    /**
     * The description of the notebook
     */
    description?: (string | null);
};

/**
 * Response model for notebook creation endpoint.
 */
export type NotebookPostResponse = {
    /**
     * The name of the notebook
     */
    name: string;
    /**
     * The description of the notebook
     */
    description?: (string | null);
    /**
     * The unique identifier of the notebook
     */
    id: string;
    /**
     * The date and time the notebook was created
     */
    createdAt: Date;
    /**
     * The date and time the notebook was last updated
     */
    updatedAt: Date;
};

/**
 * Response model for getting multiple notebooks.
 *
 * Attributes:
 * notebooks: List of notebook responses
 */
export type NotebooksGetResponse = {
    /**
     * The list of notebooks
     */
    notebooks: Array<NotebookGetResponse>;
};

/**
 * Pydantic model representing a user in the system.
 */
export type User = {
    id: string;
    email: string;
    name: string;
    profileImageUrl: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ListNotebooksNotebooksGetResponse = (NotebooksGetResponse);

export type ListNotebooksNotebooksGetError = unknown;

export type CreateNotebookNotebooksPostData = {
    body: NotebookPostRequest;
};

export type CreateNotebookNotebooksPostResponse = (NotebookPostResponse);

export type CreateNotebookNotebooksPostError = (HttpValidationError);

export type GetContextsNotebooksNotebookIdContextsGetData = {
    path: {
        notebook_id: string;
    };
};

export type GetContextsNotebooksNotebookIdContextsGetResponse = (ContextsGetResponse);

export type GetContextsNotebooksNotebookIdContextsGetError = (HttpValidationError);

export type GetContextNotebooksNotebookIdContextsContextIdGetData = {
    path: {
        context_id: string;
        notebook_id: string;
    };
};

export type GetContextNotebooksNotebookIdContextsContextIdGetResponse = (ContextGetResponse);

export type GetContextNotebooksNotebookIdContextsContextIdGetError = (HttpValidationError);

export type UploadMetadataNotebooksNotebookIdContextsMetadataPostData = {
    body: ContextMetadataPostRequest;
    path: {
        notebook_id: string;
    };
};

export type UploadMetadataNotebooksNotebookIdContextsMetadataPostResponse = (ContextMetadataPostResponse);

export type UploadMetadataNotebooksNotebookIdContextsMetadataPostError = (HttpValidationError);

export type ProcessDocumentChunksNotebooksNotebookIdContextsContextIdChunkPostData = {
    path: {
        context_id: string;
        notebook_id: string;
    };
};

export type ProcessDocumentChunksNotebooksNotebookIdContextsContextIdChunkPostResponse = (void);

export type ProcessDocumentChunksNotebooksNotebookIdContextsContextIdChunkPostError = (HttpValidationError);

export type GetFileNotebooksNotebookIdContextsContextIdFileGetData = {
    path: {
        context_id: string;
        notebook_id: string;
    };
};

export type GetFileNotebooksNotebookIdContextsContextIdFileGetResponse = (ContextFileGetResponse);

export type GetFileNotebooksNotebookIdContextsContextIdFileGetError = (HttpValidationError);

export type ChatWithNotebookNotebooksNotebookIdChatPostData = {
    body: ChatRequest;
    path: {
        notebook_id: string;
    };
};

export type ChatWithNotebookNotebooksNotebookIdChatPostResponse = (ChatResponse);

export type ChatWithNotebookNotebooksNotebookIdChatPostError = (HttpValidationError);

export type GetUserUsersMeGetResponse = (User);

export type GetUserUsersMeGetError = unknown;

export type HealthHealthzHealthzGetResponse = (unknown);

export type HealthHealthzHealthzGetError = unknown;

export type ListNotebooksNotebooksGetResponseTransformer = (data: any) => Promise<ListNotebooksNotebooksGetResponse>;

export type NotebooksGetResponseModelResponseTransformer = (data: any) => NotebooksGetResponse;

export type NotebookGetResponseModelResponseTransformer = (data: any) => NotebookGetResponse;

export const NotebookGetResponseModelResponseTransformer: NotebookGetResponseModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const NotebooksGetResponseModelResponseTransformer: NotebooksGetResponseModelResponseTransformer = data => {
    if (Array.isArray(data?.notebooks)) {
        data.notebooks.forEach(NotebookGetResponseModelResponseTransformer);
    }
    return data;
};

export const ListNotebooksNotebooksGetResponseTransformer: ListNotebooksNotebooksGetResponseTransformer = async (data) => {
    NotebooksGetResponseModelResponseTransformer(data);
    return data;
};

export type CreateNotebookNotebooksPostResponseTransformer = (data: any) => Promise<CreateNotebookNotebooksPostResponse>;

export type NotebookPostResponseModelResponseTransformer = (data: any) => NotebookPostResponse;

export const NotebookPostResponseModelResponseTransformer: NotebookPostResponseModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const CreateNotebookNotebooksPostResponseTransformer: CreateNotebookNotebooksPostResponseTransformer = async (data) => {
    NotebookPostResponseModelResponseTransformer(data);
    return data;
};