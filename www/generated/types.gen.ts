// This file is auto-generated by @hey-api/openapi-ts

export type BodyUploadFileNotebooksNotebookIdContextsContextIdUploadPost = {
    file: (Blob | File);
};

export type ContextFileUploadPostResponse = {
    /**
     * A signed URL for uploading a file
     */
    signedUploadUrl?: (string | null);
};

export type ContextGetResponse = {
    /**
     * The unique identifier of the context
     */
    id: string;
    /**
     * The name of the context
     */
    name: string;
    /**
     * The description of the context
     */
    description?: (string | null);
    /**
     * The type of the context, e.g., PDF, text
     */
    type: ContextType;
};

export type ContextMetadataPostRequest = {
    /**
     * The name of the context
     */
    name: string;
    /**
     * The description of the context
     */
    description?: (string | null);
    /**
     * The type of the context
     */
    type: ContextType;
};

export type ContextMetadataPostResponse = {
    /**
     * A signed URL for uploading a file
     */
    signedUploadUrl?: (string | null);
    /**
     * The name of the context
     */
    name: string;
    /**
     * The description of the context
     */
    description?: (string | null);
    /**
     * The type of the context, e.g., PDF, text
     */
    type: ContextType;
    /**
     * The unique identifier of the context
     */
    id: string;
};

export type ContextsGetResponse = {
    /**
     * The list of contexts
     */
    contexts: Array<ContextGetResponse>;
};

export type ContextType = 'pdf' | 'external_url' | 'free_form_text';

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type NotebookGetResponse = {
    /**
     * The name of the notebook
     */
    name: string;
    /**
     * The description of the notebook
     */
    description?: (string | null);
    /**
     * The unique identifier of the notebook
     */
    id: string;
    /**
     * The date and time the notebook was created
     */
    createdAt: Date;
    /**
     * The date and time the notebook was last updated
     */
    updatedAt: Date;
    /**
     * The unique identifier of the user who owns the notebook
     */
    ownerId: string;
};

export type NotebookPostRequest = {
    /**
     * The name of the notebook
     */
    name: string;
    /**
     * The description of the notebook
     */
    description?: (string | null);
};

export type NotebookPostResponse = {
    /**
     * The name of the notebook
     */
    name: string;
    /**
     * The description of the notebook
     */
    description?: (string | null);
    /**
     * The unique identifier of the notebook
     */
    id: string;
    /**
     * The date and time the notebook was created
     */
    createdAt: Date;
    /**
     * The date and time the notebook was last updated
     */
    updatedAt: Date;
};

export type NotebooksGetResponse = {
    /**
     * The list of notebooks
     */
    notebooks: Array<NotebookGetResponse>;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ListNotebooksNotebooksGetResponse = (NotebooksGetResponse);

export type ListNotebooksNotebooksGetError = unknown;

export type CreateNotebookNotebooksPostData = {
    body: NotebookPostRequest;
};

export type CreateNotebookNotebooksPostResponse = (NotebookPostResponse);

export type CreateNotebookNotebooksPostError = (HttpValidationError);

export type ListContextsNotebooksNotebookIdContextsGetData = {
    path: {
        notebook_id: string;
    };
};

export type ListContextsNotebooksNotebookIdContextsGetResponse = (ContextsGetResponse);

export type ListContextsNotebooksNotebookIdContextsGetError = (HttpValidationError);

export type UploadMetadataNotebooksNotebookIdContextsMetadataPostData = {
    body: ContextMetadataPostRequest;
    path: {
        notebook_id: string;
    };
};

export type UploadMetadataNotebooksNotebookIdContextsMetadataPostResponse = (ContextMetadataPostResponse);

export type UploadMetadataNotebooksNotebookIdContextsMetadataPostError = (HttpValidationError);

export type UploadFileNotebooksNotebookIdContextsContextIdUploadPostData = {
    body: BodyUploadFileNotebooksNotebookIdContextsContextIdUploadPost;
    path: {
        context_id: string;
        notebook_id: string;
    };
};

export type UploadFileNotebooksNotebookIdContextsContextIdUploadPostResponse = (ContextFileUploadPostResponse);

export type UploadFileNotebooksNotebookIdContextsContextIdUploadPostError = (HttpValidationError);

export type RootGetResponse = (unknown);

export type RootGetError = unknown;

export type ListNotebooksNotebooksGetResponseTransformer = (data: any) => Promise<ListNotebooksNotebooksGetResponse>;

export type NotebooksGetResponseModelResponseTransformer = (data: any) => NotebooksGetResponse;

export type NotebookGetResponseModelResponseTransformer = (data: any) => NotebookGetResponse;

export const NotebookGetResponseModelResponseTransformer: NotebookGetResponseModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const NotebooksGetResponseModelResponseTransformer: NotebooksGetResponseModelResponseTransformer = data => {
    if (Array.isArray(data?.notebooks)) {
        data.notebooks.forEach(NotebookGetResponseModelResponseTransformer);
    }
    return data;
};

export const ListNotebooksNotebooksGetResponseTransformer: ListNotebooksNotebooksGetResponseTransformer = async (data) => {
    NotebooksGetResponseModelResponseTransformer(data);
    return data;
};

export type CreateNotebookNotebooksPostResponseTransformer = (data: any) => Promise<CreateNotebookNotebooksPostResponse>;

export type NotebookPostResponseModelResponseTransformer = (data: any) => NotebookPostResponse;

export const NotebookPostResponseModelResponseTransformer: NotebookPostResponseModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const CreateNotebookNotebooksPostResponseTransformer: CreateNotebookNotebooksPostResponseTransformer = async (data) => {
    NotebookPostResponseModelResponseTransformer(data);
    return data;
};