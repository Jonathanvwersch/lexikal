// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import { type ListNotebooksNotebooksGetError, type ListNotebooksNotebooksGetResponse, type CreateNotebookNotebooksPostData, type CreateNotebookNotebooksPostError, type CreateNotebookNotebooksPostResponse, type GetContextsNotebooksNotebookIdContextsGetData, type GetContextsNotebooksNotebookIdContextsGetError, type GetContextsNotebooksNotebookIdContextsGetResponse, type GetContextNotebooksNotebookIdContextsContextIdGetData, type GetContextNotebooksNotebookIdContextsContextIdGetError, type GetContextNotebooksNotebookIdContextsContextIdGetResponse, type UploadMetadataNotebooksNotebookIdContextsMetadataPostData, type UploadMetadataNotebooksNotebookIdContextsMetadataPostError, type UploadMetadataNotebooksNotebookIdContextsMetadataPostResponse, type ProcessDocumentChunksNotebooksNotebookIdContextsContextIdChunkPostData, type ProcessDocumentChunksNotebooksNotebookIdContextsContextIdChunkPostError, type ProcessDocumentChunksNotebooksNotebookIdContextsContextIdChunkPostResponse, type GetFileNotebooksNotebookIdContextsContextIdFileGetData, type GetFileNotebooksNotebookIdContextsContextIdFileGetError, type GetFileNotebooksNotebookIdContextsContextIdFileGetResponse, type ChatWithNotebookNotebooksNotebookIdChatPostData, type ChatWithNotebookNotebooksNotebookIdChatPostError, type ChatWithNotebookNotebooksNotebookIdChatPostResponse, type GetUserUsersMeGetError, type GetUserUsersMeGetResponse, type HealthHealthzHealthzGetError, type HealthHealthzHealthzGetResponse, ListNotebooksNotebooksGetResponseTransformer, CreateNotebookNotebooksPostResponseTransformer } from './types.gen';

export const client = createClient(createConfig());

/**
 * List Notebooks
 * Retrieve all notebooks for the authenticated user.
 *
 * Args:
 * request (Request): The incoming request object containing user authentication
 * db (Client): Database client dependency
 *
 * Returns:
 * NotebooksGetResponse: List of notebooks belonging to the user
 */
export const listNotebooksNotebooksGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ListNotebooksNotebooksGetResponse, ListNotebooksNotebooksGetError, ThrowOnError>({
        ...options,
        url: '/notebooks',
        responseTransformer: ListNotebooksNotebooksGetResponseTransformer
    });
};

/**
 * Create Notebook
 * Create a new notebook for the authenticated user.
 *
 * Args:
 * request (Request): The incoming request object containing user authentication
 * notebook (NotebookPostRequest): The notebook data to be created
 * db (Client): Database client dependency
 *
 * Returns:
 * NotebookPostResponse: The created notebook data
 */
export const createNotebookNotebooksPost = <ThrowOnError extends boolean = false>(options: Options<CreateNotebookNotebooksPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateNotebookNotebooksPostResponse, CreateNotebookNotebooksPostError, ThrowOnError>({
        ...options,
        url: '/notebooks',
        responseTransformer: CreateNotebookNotebooksPostResponseTransformer
    });
};

/**
 * Get Contexts
 * List all contexts associated with a specific notebook.
 */
export const getContextsNotebooksNotebookIdContextsGet = <ThrowOnError extends boolean = false>(options: Options<GetContextsNotebooksNotebookIdContextsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetContextsNotebooksNotebookIdContextsGetResponse, GetContextsNotebooksNotebookIdContextsGetError, ThrowOnError>({
        ...options,
        url: '/notebooks/{notebook_id}/contexts'
    });
};

/**
 * Get Context
 * Get metadata for a specific context.
 *
 * Args:
 * context_id: ID of the context to retrieve
 * notebook_id: ID of the notebook containing the context
 *
 * Returns:
 * ContextGetResponse: Context metadata with signed URL
 */
export const getContextNotebooksNotebookIdContextsContextIdGet = <ThrowOnError extends boolean = false>(options: Options<GetContextNotebooksNotebookIdContextsContextIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetContextNotebooksNotebookIdContextsContextIdGetResponse, GetContextNotebooksNotebookIdContextsContextIdGetError, ThrowOnError>({
        ...options,
        url: '/notebooks/{notebook_id}/contexts/{context_id}'
    });
};

/**
 * Upload Metadata
 * Upload metadata for a new context.
 *
 * Args:
 * notebook_id (str): The ID of the notebook
 * context (ContextMetadataPostRequest): Context metadata
 * db (Client): Database client dependency
 * current_user (dict): Current authenticated user
 *
 * Returns:
 * ContextMetadataPostResponse: Created context with signed upload URL
 *
 * Raises:
 * HTTPException: 500 if context creation fails
 */
export const uploadMetadataNotebooksNotebookIdContextsMetadataPost = <ThrowOnError extends boolean = false>(options: Options<UploadMetadataNotebooksNotebookIdContextsMetadataPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<UploadMetadataNotebooksNotebookIdContextsMetadataPostResponse, UploadMetadataNotebooksNotebookIdContextsMetadataPostError, ThrowOnError>({
        ...options,
        url: '/notebooks/{notebook_id}/contexts/metadata'
    });
};

/**
 * Process Document Chunks
 * Process and store document chunks for a given context.
 *
 * Args:
 * context_id (str): The ID of the context
 * notebook_id (str): The ID of the notebook
 * db (Client): Database client dependency
 * current_user (dict): Current authenticated user
 *
 * Raises:
 * HTTPException: 403 if user is not the notebook owner
 * HTTPException: 404 if context not found
 * HTTPException: 500 if processing fails
 */
export const processDocumentChunksNotebooksNotebookIdContextsContextIdChunkPost = <ThrowOnError extends boolean = false>(options: Options<ProcessDocumentChunksNotebooksNotebookIdContextsContextIdChunkPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ProcessDocumentChunksNotebooksNotebookIdContextsContextIdChunkPostResponse, ProcessDocumentChunksNotebooksNotebookIdContextsContextIdChunkPostError, ThrowOnError>({
        ...options,
        url: '/notebooks/{notebook_id}/contexts/{context_id}/chunk'
    });
};

/**
 * Get File
 * Get a signed URL for accessing a context file from storage.
 */
export const getFileNotebooksNotebookIdContextsContextIdFileGet = <ThrowOnError extends boolean = false>(options: Options<GetFileNotebooksNotebookIdContextsContextIdFileGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFileNotebooksNotebookIdContextsContextIdFileGetResponse, GetFileNotebooksNotebookIdContextsContextIdFileGetError, ThrowOnError>({
        ...options,
        url: '/notebooks/{notebook_id}/contexts/{context_id}/file'
    });
};

/**
 * Chat With Notebook
 * Generate a chat response for a given notebook.
 *
 * Args:
 * notebook_id (str): ID of the notebook to chat with
 * chat_request (ChatRequest): Contains message, history and optional context_ids
 * request (Request): FastAPI request object
 * db (Client): Database client
 *
 * Returns:
 * ChatResponse: Contains generated response and source references
 *
 * Raises:
 * HTTPException: If user is not the notebook owner
 */
export const chatWithNotebookNotebooksNotebookIdChatPost = <ThrowOnError extends boolean = false>(options: Options<ChatWithNotebookNotebooksNotebookIdChatPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ChatWithNotebookNotebooksNotebookIdChatPostResponse, ChatWithNotebookNotebooksNotebookIdChatPostError, ThrowOnError>({
        ...options,
        url: '/notebooks/{notebook_id}/chat'
    });
};

/**
 * Get User
 * Get the current user's information.
 *
 * Args:
 * request (Request): The incoming request object
 * db (Client): Database client dependency
 *
 * Returns:
 * User: The current user's information
 */
export const getUserUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserUsersMeGetResponse, GetUserUsersMeGetError, ThrowOnError>({
        ...options,
        url: '/users/me'
    });
};

/**
 * Health
 * Health check endpoint.
 *
 * Returns:
 * dict: API status information
 */
export const healthHealthzHealthzGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthHealthzHealthzGetResponse, HealthHealthzHealthzGetError, ThrowOnError>({
        ...options,
        url: '/healthz/healthz'
    });
};